// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.chariot.games.quizzo.model;

import com.chariot.games.quizzo.db.AnswerByChoiceRepository;
import com.chariot.games.quizzo.model.AnswerByChoice;
import com.chariot.games.quizzo.model.AnswerByChoiceDataOnDemand;
import com.chariot.games.quizzo.model.Question;
import com.chariot.games.quizzo.model.Team;
import com.chariot.games.quizzo.service.AnswerByChoiceService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AnswerByChoiceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AnswerByChoiceDataOnDemand: @Component;
    
    private Random AnswerByChoiceDataOnDemand.rnd = new SecureRandom();
    
    private List<AnswerByChoice> AnswerByChoiceDataOnDemand.data;
    
    @Autowired
    AnswerByChoiceService AnswerByChoiceDataOnDemand.answerByChoiceService;
    
    @Autowired
    AnswerByChoiceRepository AnswerByChoiceDataOnDemand.answerByChoiceRepository;
    
    public AnswerByChoice AnswerByChoiceDataOnDemand.getNewTransientAnswerByChoice(int index) {
        AnswerByChoice obj = new AnswerByChoice();
        setBonusPoints(obj, index);
        setQuestion(obj, index);
        setTeam(obj, index);
        return obj;
    }
    
    public void AnswerByChoiceDataOnDemand.setBonusPoints(AnswerByChoice obj, int index) {
        BigDecimal bonusPoints = BigDecimal.valueOf(index);
        if (bonusPoints.compareTo(new BigDecimal("-100.0")) == -1 || bonusPoints.compareTo(new BigDecimal("100.0")) == 1) {
            bonusPoints = new BigDecimal("100.0");
        }
        obj.setBonusPoints(bonusPoints);
    }
    
    public void AnswerByChoiceDataOnDemand.setQuestion(AnswerByChoice obj, int index) {
        Question question = null;
        obj.setQuestion(question);
    }
    
    public void AnswerByChoiceDataOnDemand.setTeam(AnswerByChoice obj, int index) {
        Team team = null;
        obj.setTeam(team);
    }
    
    public AnswerByChoice AnswerByChoiceDataOnDemand.getSpecificAnswerByChoice(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AnswerByChoice obj = data.get(index);
        Long id = obj.getId();
        return answerByChoiceService.findAnswerByChoice(id);
    }
    
    public AnswerByChoice AnswerByChoiceDataOnDemand.getRandomAnswerByChoice() {
        init();
        AnswerByChoice obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return answerByChoiceService.findAnswerByChoice(id);
    }
    
    public boolean AnswerByChoiceDataOnDemand.modifyAnswerByChoice(AnswerByChoice obj) {
        return false;
    }
    
    public void AnswerByChoiceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = answerByChoiceService.findAnswerByChoiceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AnswerByChoice' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AnswerByChoice>();
        for (int i = 0; i < 10; i++) {
            AnswerByChoice obj = getNewTransientAnswerByChoice(i);
            try {
                answerByChoiceService.saveAnswerByChoice(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            answerByChoiceRepository.flush();
            data.add(obj);
        }
    }
    
}
