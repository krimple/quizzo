// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.chariot.games.quizzo.model;

import com.chariot.games.quizzo.db.QuizRepository;
import com.chariot.games.quizzo.model.Quiz;
import com.chariot.games.quizzo.model.QuizDataOnDemand;
import com.chariot.games.quizzo.service.QuizService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect QuizDataOnDemand_Roo_DataOnDemand {
    
    declare @type: QuizDataOnDemand: @Component;
    
    private Random QuizDataOnDemand.rnd = new SecureRandom();
    
    private List<Quiz> QuizDataOnDemand.data;
    
    @Autowired
    QuizService QuizDataOnDemand.quizService;
    
    @Autowired
    QuizRepository QuizDataOnDemand.quizRepository;
    
    public Quiz QuizDataOnDemand.getNewTransientQuiz(int index) {
        Quiz obj = new Quiz();
        setDescription(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void QuizDataOnDemand.setDescription(Quiz obj, int index) {
        String description = "description_" + index;
        if (description.length() > 500) {
            description = description.substring(0, 500);
        }
        obj.setDescription(description);
    }
    
    public void QuizDataOnDemand.setTitle(Quiz obj, int index) {
        String title = "title_" + index;
        if (title.length() > 200) {
            title = title.substring(0, 200);
        }
        obj.setTitle(title);
    }
    
    public Quiz QuizDataOnDemand.getSpecificQuiz(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Quiz obj = data.get(index);
        Long id = obj.getId();
        return quizService.findQuiz(id);
    }
    
    public Quiz QuizDataOnDemand.getRandomQuiz() {
        init();
        Quiz obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return quizService.findQuiz(id);
    }
    
    public boolean QuizDataOnDemand.modifyQuiz(Quiz obj) {
        return false;
    }
    
    public void QuizDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = quizService.findQuizEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Quiz' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Quiz>();
        for (int i = 0; i < 10; i++) {
            Quiz obj = getNewTransientQuiz(i);
            try {
                quizService.saveQuiz(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            quizRepository.flush();
            data.add(obj);
        }
    }
    
}
