// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.chariot.games.quizzo.model;

import com.chariot.games.quizzo.db.FillInTheBlankAnswerRepository;
import com.chariot.games.quizzo.model.FillInTheBlankAnswerDataOnDemand;
import com.chariot.games.quizzo.model.FillInTheBlankAnswerIntegrationTest;
import com.chariot.games.quizzo.service.FillInTheBlankAnswerService;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect FillInTheBlankAnswerIntegrationTest_Roo_IntegrationTest {
    
    declare @type: FillInTheBlankAnswerIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: FillInTheBlankAnswerIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: FillInTheBlankAnswerIntegrationTest: @Transactional;
    
    @Autowired
    private FillInTheBlankAnswerDataOnDemand FillInTheBlankAnswerIntegrationTest.dod;
    
    @Autowired
    FillInTheBlankAnswerService FillInTheBlankAnswerIntegrationTest.fillInTheBlankAnswerService;
    
    @Autowired
    FillInTheBlankAnswerRepository FillInTheBlankAnswerIntegrationTest.fillInTheBlankAnswerRepository;
    
    @Test
    public void FillInTheBlankAnswerIntegrationTest.testCountAllFillInTheBlankAnswers() {
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to initialize correctly", dod.getRandomFillInTheBlankAnswer());
        long count = fillInTheBlankAnswerService.countAllFillInTheBlankAnswers();
        Assert.assertTrue("Counter for 'FillInTheBlankAnswer' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void FillInTheBlankAnswerIntegrationTest.testFindFillInTheBlankAnswer() {
        FillInTheBlankAnswer obj = dod.getRandomFillInTheBlankAnswer();
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to provide an identifier", id);
        obj = fillInTheBlankAnswerService.findFillInTheBlankAnswer(id);
        Assert.assertNotNull("Find method for 'FillInTheBlankAnswer' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'FillInTheBlankAnswer' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void FillInTheBlankAnswerIntegrationTest.testFindAllFillInTheBlankAnswers() {
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to initialize correctly", dod.getRandomFillInTheBlankAnswer());
        long count = fillInTheBlankAnswerService.countAllFillInTheBlankAnswers();
        Assert.assertTrue("Too expensive to perform a find all test for 'FillInTheBlankAnswer', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<FillInTheBlankAnswer> result = fillInTheBlankAnswerService.findAllFillInTheBlankAnswers();
        Assert.assertNotNull("Find all method for 'FillInTheBlankAnswer' illegally returned null", result);
        Assert.assertTrue("Find all method for 'FillInTheBlankAnswer' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void FillInTheBlankAnswerIntegrationTest.testFindFillInTheBlankAnswerEntries() {
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to initialize correctly", dod.getRandomFillInTheBlankAnswer());
        long count = fillInTheBlankAnswerService.countAllFillInTheBlankAnswers();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<FillInTheBlankAnswer> result = fillInTheBlankAnswerService.findFillInTheBlankAnswerEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'FillInTheBlankAnswer' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'FillInTheBlankAnswer' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void FillInTheBlankAnswerIntegrationTest.testFlush() {
        FillInTheBlankAnswer obj = dod.getRandomFillInTheBlankAnswer();
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to provide an identifier", id);
        obj = fillInTheBlankAnswerService.findFillInTheBlankAnswer(id);
        Assert.assertNotNull("Find method for 'FillInTheBlankAnswer' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyFillInTheBlankAnswer(obj);
        Integer currentVersion = obj.getVersion();
        fillInTheBlankAnswerRepository.flush();
        Assert.assertTrue("Version for 'FillInTheBlankAnswer' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void FillInTheBlankAnswerIntegrationTest.testUpdateFillInTheBlankAnswerUpdate() {
        FillInTheBlankAnswer obj = dod.getRandomFillInTheBlankAnswer();
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to provide an identifier", id);
        obj = fillInTheBlankAnswerService.findFillInTheBlankAnswer(id);
        boolean modified =  dod.modifyFillInTheBlankAnswer(obj);
        Integer currentVersion = obj.getVersion();
        FillInTheBlankAnswer merged = (FillInTheBlankAnswer)fillInTheBlankAnswerService.updateFillInTheBlankAnswer(obj);
        fillInTheBlankAnswerRepository.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'FillInTheBlankAnswer' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void FillInTheBlankAnswerIntegrationTest.testSaveFillInTheBlankAnswer() {
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to initialize correctly", dod.getRandomFillInTheBlankAnswer());
        FillInTheBlankAnswer obj = dod.getNewTransientFillInTheBlankAnswer(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'FillInTheBlankAnswer' identifier to be null", obj.getId());
        fillInTheBlankAnswerService.saveFillInTheBlankAnswer(obj);
        fillInTheBlankAnswerRepository.flush();
        Assert.assertNotNull("Expected 'FillInTheBlankAnswer' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void FillInTheBlankAnswerIntegrationTest.testDeleteFillInTheBlankAnswer() {
        FillInTheBlankAnswer obj = dod.getRandomFillInTheBlankAnswer();
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'FillInTheBlankAnswer' failed to provide an identifier", id);
        obj = fillInTheBlankAnswerService.findFillInTheBlankAnswer(id);
        fillInTheBlankAnswerService.deleteFillInTheBlankAnswer(obj);
        fillInTheBlankAnswerRepository.flush();
        Assert.assertNull("Failed to remove 'FillInTheBlankAnswer' with identifier '" + id + "'", fillInTheBlankAnswerService.findFillInTheBlankAnswer(id));
    }
    
}
